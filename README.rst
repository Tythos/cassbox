CassBox
=======

Basic introduction and sandbox to Cassandra, the Apache NoSQL database
technology, largely based on an update/fix to the quickstart guide on the new
Cassandra webpage content (which is still a work in progress).

Step One - Start a Database Instance
------------------------------------

Docker can be used to start up a single-node local cluster in a single command.
We'll use v3.11 here since v4.0 is still a little fresh, exposing the default
port (9042) for external interaction with the CQLSH terminal::

 > docker run -p=9042:9042 cassandra:3.11

You'll see a wall of text as the array of Java processes start up. Once you see
one that mentions "Starting listening for CQL clients on /0.0.0.0:9042...",
you're good to proceed to the next step (after CTRL-C'ing to detach the shell,
which will remain alive for the time being).

Step Two - Define Scripts for Population
----------------------------------------

You can use .CQL scripts (Cassandra Query Language) to auto-populate the
database. Let's write a basic script in the "data.cql" file::
  
  CREATE KEYSPACE IF NOT EXISTS store WITH REPLICATION = {
    'class' : 'SimpleStrategy',
    'replication_factor' : '1'
  };

  CREATE TABLE IF NOT EXISTS store.shopping_cart (
    userid text PRIMARY KEY,
    item_count int,
    last_update_timestamp timestamp
  );

  INSERT INTO store.shopping_cart (
    userid, item_count, last_update_timestamp
  ) VALUES (
    '9876', 2, toTimeStamp(toDate(now()))
  );

  INSERT INTO store.shopping_cart (
    userid, item_count, last_update_timestamp
  ) VALUES (
    '1234', 5, toTimeStamp(toDate(now()))
  );

Most of these commands should look pretty familiar to you if you are coming
from the SQL world. We are creating a keyspace (think of it as a meta-table),
defining a table within that keyspace, and inserting two new entries.

Step Three - Use CQLSH to Run Scripts
-------------------------------------

We'll use a second container, which is built around the CQLSH (or CQL shell),
to run the "data.cql" script we created. Run the "nuvo/docker-cqlsh" image as a
temporary container that mounts your directory into the "/scripts" folder::

  > docker run -v "%cd%":/scripts --env CQLSH_HOST=host.docker.internal nuvo/docker-cqlsh

There are several things to note about this step:

#. Because we don't give the contianer a command, it will (by default) run the
   CQLSH against any .CQL scripts we mount into the "/scripts" folder.

#. We have to tell the CQLSH instance what host to connect to. In this case, we
   can tell it to use the internal docker host to connect to the database
   instance we started in Step One.

#. You will see a report generated by the shell: it will check the connection,
   report success, and evalute the script. Once finished, it will give you a
   "Done." message and shut down the container.

Step Four - Interactive Queries
-------------------------------

Once populated, the database can also be queried interactively. We'll use the
CQLSH image again, but this time run it interactively::

  > docker run -it --env CQLSH_HOST=host.docker.internal nuvo/docker-cqlsh bash

Once the container has started, you can launch the CQLSH terminal directly::

 > $ cqlsh

From here, you can execute any CQL queries against the current connection::

 > $ cqlsh> SELECT * FROM store.shopping_cart;

You should then see a report of the entries we inserted into the database using
the script we defined in Step Two. That includes writing your own entries
directly::

 > $ cqlsh> INSERT INTO store.shopping_cart (userid, item_count) VALUES ('4567', 20);

Step Five - NO, SHUT THEM ALL DOWN! HURRY!
------------------------------------------

Since it's all containerized, cleanup is very straightforward:

* Use "exit" to leave the CQLSH shell

* Then use "exit" again to leave the CQLSH container (which will them close)

* Lastly, use "docker stop [cassandra container hash]" to stop the database

But where do we go from here? So many possibilities. I would start by
consulting the more detailed "Getting Started" page under the official
Cassandra documentation next:

  https://cassandra.apache.org/doc/latest/getting_started/index.html

In particular, you're probably going to be interested in the following use
cases:

* Using client drivers from other languages, like Python, to interact with a
  Cassandra cluster from other programs

* Mounting persistent storage for your Cassandra database instance, so you
  don't lose state every time the container shuts down

* Migrating to multi-node configurations--when you're ready!

* Securing your database with authentication, encryption, and more
  sophisticated (Kubernetes, docker-compose, etc.) multi-container
  configurations that "hide" your database behind other services.

* Automating population and integrating message streaming to ingest data from
  other sources.
